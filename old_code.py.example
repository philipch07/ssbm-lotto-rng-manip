@ rng value difference calc
    # print("SSBM RNG Value Difference Calculator")
    src = -1
    tgt = -1

    # while True:
    # Get first value
    src = get_hex(tgt)
    print(f'Received source value: {src}')
    set_rng(src)
    print(f'\nSet rng value to {src}')
    # Get second value
    # tgt = get_hex()
    # print(f'Received target value: {tgt}')

    # diff = rng_diff(src, tgt)
    # if diff == -1:
    #     print("tbh idk what happened")
    # else:
    #     print(f'Going from {src} => {tgt}:')
    #     print(f'{diff} steps.')

@ random characters with locked characters
    # chars = ['doc', 'mario', 'luigi', 'bowser', 'peach', 'yoshi', 'dk', 'falcon', 'ganon',
                    'falco', 'fox', 'ness', 'ice', 'kirby', 'samus', 'zelda', 'link', 'yl',
                    'pichu', 'pika', 'puff', 'm2', 'gnw', 'marth', 'roy']
    # locked_chars = ['doc', 'luigi', 'ganon', 'falco', 'yl', 'pichu', 'm2', 'gnw', 'roy']
    # while True:
    #     src = get_hex(tgt)
    #     set_rng(src)
        
    #     rand_char = chars[get_rand_int(25)]
    #     while rand_char in locked_chars:
    #         print('hit the loop')
    #         rand_char = chars[get_rand_int(25)]
        
    #     print(rand_char)

@ range of seeds which give a certain tag
    # prev_tag = 0

    # for i in range(2**32):
    #     set_rng(i)
    #     new_tag = get_rand_int(145, False)
    #     if prev_tag != new_tag:
    #         print(f'tag={prev_tag}, up to {i - 1}')
    #         prev_tag = new_tag

@ range of seeds which return the value of the current index
    # curr_val = 0
    # r = []
    # i = 0
    # beeg = 2**32
    # while i < beeg:
    #     set_rng(i)
    #     temp = get_rand_int(100, False)
    #     if temp != curr_val:
    #         curr_val = temp
    #         r.append(i)
    # print(r)

@ finding upper bound of repeated rolls (for tags)
    # prev = 0
    # count = 1
    # max_count = 0
    # set_rng(0)
    # for _ in range(2**32):
    #     rand_int = get_rand_int(145)
    #     if rand_int == prev:
    #         count += 1
    #         max_count = max(count, max_count)
    #     else:
    #         count = 0
    # print(max_count)

@ incomplete attempt at trying to reverse seed search (RSS) from random tags
    # task: find current rng value from randoming your tag n times (probably 5 times is good enough)
    # current rng value: [0, 2^32 - 1]

    # tags = ['AAAA','1DER','2BIT','2L8','2PAY','401K','4BDN','4BY4','4EVA','7HVN','AOK','ARCH','ARN','ASH','BAST','BBBB','BCUZ','BETA','BOBO','BOMB','BONE','BOO','BORT',
             'BOZO','BUB','BUD','BUZZ','BYRN','CHUM','COOP','CUBE','CUD','DAYZ','DIRT','DIVA','DNCR','DUCK','DUD','DUFF','DV8','ED','ELBO','FAMI','FIDO','FILO','FIRE',
             'FLAV','FLEA','FLYN','GBA','GCN','GLUV','GR8','GRIT','GRRL','GUST','GUT','HAMB','HAND','HELA','HEYU','HI5','HIKU','HOOD','HYDE','IGGY','IKE','IMPA','JAZZ',
             'JEKL','JOJO','JUNK','KEY','KILA','KITY','KLOB','KNEE','L33T','L8ER','LCD','LOKI','LULU','MAC','MAMA','ME','MILO','MIST','MOJO','MOSH','NADA','ZZZZ','NAVI',
             'NELL','NEWT','NOOK','NEWB','ODIN','OLAF','OOPS','OPUS','PAPA','PIT','POP','PKMN','QTPI','RAM','RNDM','ROBN','ROT8','RUTO','SAMI','SET','SETI','SHIG','SK8R',
             'SLIM','SMOK','SNES','SNTA','SPUD','STAR','THOR','THUG','TIRE','TLOZ','TNDO','TOAD','TOMM','UNO','VIVI','WALK','WART','WARZ','WITH','YETI','YNOT','ZAXO',
             'ZETA','ZOD','ZOE','WORM','GEEK','DUDE','WYRN','BLOB']
    
    # tag_ranges = [29622271, 59244543, 88866815, 118489087, 148111359, 177733631, 207355903, 236978175, 266600447, 296222719, 325844991, 355467263, 385089535, 414711807, 
                  444334079, 473956351, 503578623, 533200895, 562823167, 592445439, 622067711, 651689983, 681312255, 710934527, 740556799, 770179071, 799801343, 829423615, 
                  859045887, 888668159, 918290431, 947912703, 977534975, 1007157247, 1036779519, 1066401791, 1095958527, 1125580799, 1155203071, 1184825343, 1214447615, 
                  1244069887, 1273692159, 1303314431, 1332936703, 1362558975, 1392181247, 1421803519, 1451425791, 1481048063, 1510670335, 1540292607, 1569914879, 1599537151, 
                  1629159423, 1658781695, 1688403967, 1718026239, 1747648511, 1777270783, 1806893055, 1836515327, 1866137599, 1895759871, 1925382143, 1955004415, 1984626687, 
                  2014248959, 2043871231, 2073493503, 2103115775, 2132738047, 2162294783, 2191917055, 2221539327, 2251161599, 2280783871, 2310406143, 2340028415, 2369650687, 
                  2399272959, 2428895231, 2458517503, 2488139775, 2517762047, 2547384319, 2577006591, 2606628863, 2636251135, 2665873407, 2695495679, 2725117951, 2754740223, 
                  2784362495, 2813984767, 2843607039, 2873229311, 2902851583, 2932473855, 2962096127, 2991718399, 3021340671, 3050962943, 3080585215, 3110207487, 3139829759, 
                  3169452031, 3199074303, 3228631039, 3258253311, 3287875583, 3317497855, 3347120127, 3376742399, 3406364671, 3435986943, 3465609215, 3495231487, 3524853759, 
                  3554476031, 3584098303, 3613720575, 3643342847, 3672965119, 3702587391, 3732209663, 3761831935, 3791454207, 3821076479, 3850698751, 3880321023, 3909943295, 
                  3939565567, 3969187839, 3998810111, 4028432383, 4058054655, 4087676927, 4117299199, 4146921471, 4176543743, 4206166015, 4235788287, 4265410559, 4294967295]
    
    # strs is from an in game example
    # strs = ['ROBN', 'JOJO', 'THOR', 'FLYN', '2L8'] # 'POP', 'GRIT', 'DIRT', 'WART'
    
    # for s in strs:
    #     if s not in tags:
    #         print('you misinput a tag')
    #         quit(0)
    
    # initial_bucket = tags.index(strs[0])
    # l, r = 0, 0
    # if initial_bucket == 0:
    #     l = 0
    #     r = tag_ranges[0]
    # else:
    #     l = tag_ranges[initial_bucket - 1]
    #     r = tag_ranges[initial_bucket]

    # # list of possible rng values that gave us the first string and gives us the second string.
    # possible_values = []
    
    # for i in range(l, r + 1):
    #   set_rng(i)
    #   if get_rand_int(145) == tags.index(strs[1]):
    #       possible_values.append(get_rng())
    # print(len(possible_values))
    
    # temp_possible_values = []
    # count = 2
    
    # while len(possible_values) > 1:
    #     print('hi')
    #     for i in possible_values:
    #         set_rng(i)
    #         if get_rand_int(145) == tags.index(strs[count]):
    #             temp_possible_values.append(get_rng())
        
    #     possible_values = temp_possible_values.copy()
    #     temp_possible_values = []
    #     print(possible_values)
    #     print(len(possible_values))
    #     count += 1
    
    # print('poopy')

@ use_coin() function used in lotto sim
    def use_coin() -> int:
        # This looks funny, but we're returning the rng value generated here at the end.
        next_rng()
        next_rng()
        return next_rng()

@ adapted work for melee's functions:
    # Original work by Savestate
    # This code is adapted from gainge aka Judge9

    from typing import Optional

    #@804d5f90
    rng = 0x00000001
    a = 214013
    c = 2531011
    m = 2**32

    def get_rng() -> int:
        global rng
        return rng

    def set_rng(val: int) -> None :
        global rng
        rng = val

    # LCG:
    # a = 214013
    # c = 2531011
    # m = 2^32
    # Inputs:
    # `@custom` is an int passed in to compute the next rng value after the custom value, unsaved. Defaults to -1, which will use the actual rng value and save it.
    def next_rng(custom_rng_val: int = -1) -> int:
        if custom_rng_val == -1:
            global rng
            rng = (a*rng + c) % m
            return rng
        else:
            ret = (a*custom_rng_val + c) % m
            return ret

    def get_rand_int(i: int, adv = True) -> int:
        temp_rng = next_rng() if adv else get_rng()
        top_bits = temp_rng >> 16
        return (i*top_bits) >> 16

    def get_rand_float() -> int:
        temp_rng = next_rng()
        top_bits = temp_rng >> 16
        return top_bits / 65536

    def rng_diff(src: int, tgt: int) -> int:
        if src == tgt:
            return 0
        
        step = 0
        temp_src = src
        temp_tgt = tgt
        
        while temp_src != tgt and temp_tgt != src:
            temp_src = next_rng(temp_src)
            temp_tgt = next_rng(temp_tgt)
            step += 1
        
        return step if temp_src == tgt else -1 * step

    def get_hex(tgt: Optional[int] = None) -> int:
        while True:
            # Get initial input
            val = input("Source RNG value: ") if tgt is not None else input("Target RNG value: ")
            val = val.replace(" ", "")
            
            if val.lower() == 'q': # Escape option
                print("Exiting.")
                quit(0)
            elif val.lower() == 'c' and tgt is not None: # Continue by using old tgt as new src
                if tgt == -1:
                    print("Cannot continue off of previous value because you just started.")
                else:
                    return tgt
            else:
                try:
                    return int(val, 16)
                except ValueError:
                    print(f'Invalid input: \'{val}\'.')

@ complete and functional lotto sim code for initial lotto after fresh game start
    # Lottery simulator
    def main():
        src = -1
        tgt = -1
        # Initial trophy list: [trophy_name, not_owned=1/owned=0, 1p_lotto=True/lotto_only=False]
        trophies = [['ray gun', 1, True], ['super scope', 1, True], ['fire flower', 1, True], ['star rod', 1, True], ['home-run bat', 1, True], ['fan', 1, True], 
                    ['red shell', 1, False], ['flipper', 1, True], ['mr. saturn', 1, True], ['bob-omb', 1, True], ['super mushroom', 1, True], ['starman1', 1, True], 
                    ['barrel cannon', 1, True], ['party ball', 1, True], ['crate', 1, True], ['barrel', 1, True], ['capsule', 1, True], ['egg', 1, True], ['squirtle', 1, True], 
                    ['blastoise', 1, True], ['clefairy', 1, True], ['weezing', 1, True], ['chansey', 1, False], ['goldeen', 1, True], ['snorlax', 1, True], 
                    ['chikorita', 1, True], ['cyndaquil', 1, True], ['bellossom', 1, True], ['wobbuffet', 1, True], ['scizor', 1, True], ['porygon2', 1, True], 
                    ['toad', 1, True], ['coin', 1, True], ['kirby hat 1', 1, True], ['kirby hat 2', 1, True], ['kirby hat 3', 1, True], ['lakitu', 1, True], 
                    ['birdo', 1, True], ['klap trap', 1, True], ['slippi toad', 1, True], ['koopa troopa', 1, True], ['topi', 1, True], ['metal mario', 1, True], 
                    ['daisy', 1, True], ['thwomp', 1, True], ['bucket', 1, True], ['racing kart', 1, True], ['baby bowser', 1, True], ['raphael raven', 1, True], 
                    ['dixie kong', 1, False], ['dr. stewart', 1, True], ['jody summer', 1, True], ['andross 64', 1, True], ['metroid', 1, True], ['ridley', 1, True], 
                    ['fighter kirby', 1, False], ['ball kirby', 1, True], ['waddle dee', 1, True], ['rick', 1, True], ['jeff', 1, False], ['starman2', 1, True], 
                    ['bulbasaur', 1, True], ['poliwhirl', 1, True], ['eevee', 1, False], ['totodile', 1, True], ['crobat', 1, True], ['igglybuff', 1, True], 
                    ['steelix', 1, True], ['heracross', 1, True], ['professor oak', 1, False], ['misty', 1, False], ['zero-one', 1, True], ['maruo maruhige', 1, False], 
                    ['ryota hayami', 1, True], ['ray mk ii', 1, False], ['heririn', 1, True], ['excitebike', 1, True], ['ducks', 1, True], ['bubbles', 1, False], 
                    ['eggplant man', 1, False], ['balloon fighter', 1, True], ['dr. wright', 1, True], ['donbe & hikari', 1, True], ['monster', 1, True]]
        
        # the game starts off with 1 trophy already owned.
        num_owned_trophies = 0
        num_remaining_1p_lotto = 72
        NUM_AVAILABLE_TROPHIES = 84
        
        # In a run, some 1p/lotto trophies have already been collected.
        # The user should input these trophies; substrings will be allowed but the user should be careful.
        # Note that if any trophies not in the initial lotto pool are entered, then they will be ignored for now.
        # Exit the loop by entering 'x' or 'q'.
        owned_trophies = input("Type the names of the trophies that you've already collected. Substrings are allowed, but be careful. Type 'x' or 'q' to finish.\n")
        while owned_trophies.lower() != 'x' and owned_trophies.lower() != 'q':
            found = False
            for t in trophies:
                if owned_trophies in t[0]:
                    t[1] = 0
                    print(f'{t[0]} collected!')
                    num_owned_trophies += 1
                    found = True
                    if t[2]:
                        num_remaining_1p_lotto -= 1
                    break
            if not found:
                print(f'Could not find {owned_trophies}. Please double check your input.')
            owned_trophies = input("")
        
        # Begin by getting the current seed.
        src = get_hex(tgt)
        set_rng(src)
        
        # Overall stats
        total_coins = 0
        resets = 0
        
        # Now we can start the lottery simulation.
        print(f'Beginning lottery simulation with seed {hex(src)[:-1]}')
        while num_remaining_1p_lotto > 0:
            # The purpose of the first call is just to randomize the position of the coin animation as it decreases to 00.
            get_rand_int(15)
            
            # Setting up variables to be used in the coin loop
            temp_rng = src = get_rng()
            coins = 0
            first_outcome_index = -1
            
            # The coin loop; determines how many coins to use to 1) get a trophy and 2) ensure that the trophy is in the 1p/lotto category
            while True:
                coins += 1
                
                # If we have to use more than 20 coins, just spend one to update the rng value and move on.
                if coins > 20:
                    # Updating counters
                    resets += 1
                    total_coins += 1
                    
                    # Because we're just going to spend one coin, we can use the pre-computed first outcome.
                    if first_outcome_index == -1:
                        print(f'Reset #{resets}. No ideal outcome. Just spend 1 coin to get a dupe trophy.')
                    else:
                        print(f'Reset #{resets}. No ideal outcome. Just spend 1 coin to get {trophies[first_outcome_index][0]}')
                        trophies[first_outcome_index][1] = 0
                        num_owned_trophies += 1
                    # Now we want to spend the one coin.
                    # Before we can do that, remember that we already advanced the rng by a total of 20 coins.
                    # So we need to reset our rng to the correct position.
                    set_rng(src)
                    use_coin()
                    next_rng()
                    next_rng()
                    break

                # set rng to be src each time at the beginning
                set_rng(temp_rng)
                
                # 3 steps are called per coin. 
                # We can save the rng value here and re-use it in this loop instead of having to re-compute the same rng values if we loop multiple times.
                temp_rng = use_coin()
                if coins == 1:
                    first_outcome_rng_value = get_rng()
                
                # Now the game determines whether this roll is sucessful or not. This changes depending on the following formula
                success_roll = get_rand_int(100)
                chance = int(((NUM_AVAILABLE_TROPHIES - num_owned_trophies) / NUM_AVAILABLE_TROPHIES) * 100)
                if (success_roll < chance):
                    # In this case, we get a new trophy.
                    trophy_roll_rand_int = get_rand_int(NUM_AVAILABLE_TROPHIES - num_owned_trophies)
                    # The actual trophy that we roll is found by only counting through trophies that we dont have owned.
                    # For example, if we roll `15` (0-indexed), then the actual trophy that we get is not just the `15`th trophy (0-indexed), but it's the `15`th (0-indexed) *unowned* trophy.
                    # We'll use `trophy_roll_actual_index` to store the actual index of the trophy that we roll in the big Trophies list above.
                    # And we'll reuse `trophy_roll_rand_int` as a counter to let us know when we've gone through that number of unowned trophies.
                    trophy_roll_actual_index = -1
                    for t in trophies:
                        trophy_roll_actual_index += 1
                        if t[1] == 1:
                            trophy_roll_rand_int -= 1
                            if trophy_roll_rand_int == -1:
                                break
                    # At the end of this loop, `trophy_roll_actual_index` should give us the index of the trophy in the big Trophies list that we actually rolled, and not just `get_rand_int(x)`.
                    # If the boolean field in the trophies tuple is True and it is not owned, then we want to use this number of coins.
                    if trophies[trophy_roll_actual_index][2] and trophies[trophy_roll_actual_index][1] == 1:
                        print(f'{coins} -> {trophies[trophy_roll_actual_index][0]}')
                        # Mark that we now own the trophy and update counters.
                        trophies[trophy_roll_actual_index][1] = 0
                        num_owned_trophies += 1
                        num_remaining_1p_lotto -= 1
                        total_coins += coins
                        break
                    elif coins == 1:
                        first_outcome_index = trophy_roll_actual_index
                    # Note that we don't use an else case here, because we did not get a trophy in the 1p/lotto category, so we loop again.
                # Similarly, we don't use an else case here because we did not get a new trophy, so we loop again.
            # Now, the game advances the RNG one more time for an unknown reason.
            next_rng()
        
        print('-------------------------------')
        print('Results')
        print('-------------------------------')
        print(f'Total trophies collected: {num_owned_trophies}')
        print(f'All 1p/lotto trophies collected? {num_remaining_1p_lotto == 0}')
        print(f'Total number of resets: {resets}')
        print(f'Total coins spent {total_coins}')

@ old naive RSS algorithm
    # within the while loop, until the list has length strictly equal to 1

    a while loop...
        print('Beginning computations...')
        # only iterate thru all 4 billion possible values on the first run
        if first_run:
            possible_seeds = rss(range(2**32), trophy_roll_cond_amt, successful, chance, trophy_roll_int)
            first_run = False
        else:
            possible_seeds = rss(possible_seeds, trophy_roll_cond_amt, successful, chance, trophy_roll_int)

@ old naive RSS function
    def rss(init_possible_seeds: list[int], trophy_roll_cond_amt: int, successful: bool, chance: int, trophy_roll_int: int) -> list[int]:
        ret = []
        for i in init_possible_seeds:
            set_rng(i)
            get_rand_int(15)
            use_coin()
            temp_success_roll = get_rand_int(100)
            temp_trophy_roll = get_rand_int(trophy_roll_cond_amt)
            if successful and temp_success_roll < chance and temp_trophy_roll == trophy_roll_int:
                next_rng()
                ret.append(get_rng())
            elif not successful and temp_success_roll >= chance and temp_trophy_roll == trophy_roll_int:
                next_rng()
                ret.append(get_rng())
        return ret